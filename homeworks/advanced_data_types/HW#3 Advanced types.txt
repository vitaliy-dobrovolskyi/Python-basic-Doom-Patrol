# 1. Define the id of next variables:
# int_a = 55
# print(id(int_a))
#
# str_b = 'cursor'
# print(id(str_b))
#
# set_c = {1, 2, 3}
# print(id(set_c))
#
# lst_d = [1, 2, 3]
# print(id(lst_d))
#
# dict_e = {'a': 1, 'b': 2, 'c': 3}
# print(id(dict_e))
#
# 2. Append 4 and 5 to the lst_d and define the id one more time.
# lst_d = [1, 2, 3]
# lst_d.append([4,5])
# print(lst_d, id(lst_d))

# 3. Define the type of each object from step 1.

# int_a = 55
# print (type(int_a))
#
# str_b = 'cursor'
# # print(type(str_b))
# #
# set_c = {1, 2, 3}
# # print(type(set_c))
# #
# lst_d = [1, 2, 3]
# # print(type(lst_d))
# #
# dict_e = {'a': 1, 'b': 2, 'c': 3}
# print(type(dict_e))

# 4*. Check the type of the objects by using isinstance.

# print(isinstance(int_a, int))
# print(isinstance(str_b, str))
# print(isinstance(set_c, set))
# print(isinstance(lst_d, list))
# print(type(dict_e) is dict)

# String formatting:
# Replace the placeholders with a value:
# "Anna has ___ apples and ___ peaches."
#
# 5. With .format and curly braces {}

# print ("Anna has {} apples and {} peaches.".format (3,7))

# 6. By passing index numbers into the curly braces.

# print("Anna has 3 {1} and 7 {0}.".format("apples", "peaches"))

# 7. By using keyword arguments into the curly braces.

# print("Anna has 3 {first} and 7 {second}.".format(first="apples", second="peaches"))

# 8*. With indicators of field size (5 chars for the first and 3 for the second)

# print("Anna has {0:4} apples and 7 {1:2}.".format(3, "peaches"))

# 9. With f-strings and variables

# a = "apples"
# b = 7
# print(f"Anna has 3 {a} and {b} peaches.")

# 10. With % operator
# peaches = 7
# apples = 3
# print("Anna has %d apples and %d peaches." %(apples, peaches))

# 11*. With variable substitutions by name (hint: by using dict)
# name1 = "apples"
# num2 = 7
# data_dict = {"name":name1, "num":num2}
# print("Anna has 3 %(name)s and %(num)d peaches." % data_dict)


#
# Comprehensions:
# (1)
# lst = []
# for num in range(10):
#     if num % 2 == 1:
#         lst.append(num ** 2)
#     else:
#         lst.append(num ** 4)
# print(lst)
#
# (2)
# list_comprehension = [num // 2 if num % 2 == 0 else num * 10 for num in range(10)]
#
# 12. Convert (1) to list comprehension

# lst_comp = [num ** 2 if num % 2 == 1 else num ** 4 for num in range(10)]
# print(lst_comp)

# 13. Convert (2) to regular for with if-else

# lst=[]
# for num in range (10):
#     if num % 2==0:
#         lst.append(num // 2)
#     else:
#         lst.append (num**4)
# print(lst)

# (3)
# d = {}
# for num in range(1, 11):
#     if num % 2 == 1:
#         d[num] = num ** 2
# print(d)
#
#
# (4)
# d = {}
# for num in range(1, 11):
#     if num % 2 == 1:
#         d[num] = num ** 2
#     else:
#         d[num] = num // 0.5
# print(d)
#
# (5)
# dict_comprehension = {x: x**3 for x in range(10) if x**3 % 4 == 0}
# print (dict_comprehension)
#
# (6)
# dict_comprehension = {x: x**3 if x**3 % 4 == 0 else x for x in range(10)}
# print(dict_comprehension)
#
# 14. Convert (3) to dict comprehension.

# dc_with_if = {num: num ** 2 for num in range(1, 11) if num % 2 == 1}
# # print(dc_with_if)


# 15*. Convert (4) to dict comprehension.

# dc_with_elif={num:num**2 if num % 2==1 else num//0.5 for num in range (1,11)}
# print(dc_with_elif)

# 16. Convert (5) to regular for with if.
#
# x = {}
# for num in range (10):
#     if num**3 % 4 == 0:
#         x[num]=num**3
# print (x)
#
# 17*. Convert (6) to regular for with if-else.

# x = {}
# for num in range(10):
#     if num ** 3 % 4 == 0:
#         x[num] = num ** 3
#     else:
#         x[num] = num
# print(x)


# Lambda:
#
# (7)
# def foo(x, y):
#     if x < y:
#         return x
#     else:
#         return y
#
# (8)
# foo = lambda x, y, z: z if y < x and x > z else y
#
# 18. Convert (7) to lambda function

# lmb = lambda x, y: x if x < y else y
# print(lmb(3, 6))

# 19*. Convert (8) to regular function

# def foo (x,y,z):
#     if y>x and x>z:
#         return z
#     else:
#         return y
# print (foo(6,7,5))
#
# lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
#
# 20. Sort lst_to_sort from min to max

# lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
# print(sorted (lst_to_sort))

# 21. Sort lst_to_sort from max to min

# lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
# print(sorted (lst_to_sort, reverse = True))

# 22. Use map and lambda to update the lst_to_sort by multiply each element by 2

# lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
# new_lst_to_sort = list(map(lambda x: x * 2, lst_to_sort))
# print(new_lst_to_sort)

# 23*. Raise each list number to the corresponding number on another list:

# list_A = [2, 3, 4]
# list_B = [5, 6, 7]
#
# lst = list(map(lambda x, y: x ** y, list_A, list_B))
# print(lst)

# 24. Use reduce and lambda to compute the numbers of a lst_to_sort.

# lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
# import functools
#
# foo = functools.reduce (lambda x,y: x+y, lst_to_sort)
# print (foo)

# 25. Use filter and lambda to filter the number of a lst_to_sort with elem % 2 == 1.

# lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
# new_lst = list(filter(lambda x: (x%2==1), lst_to_sort))
# print(new_lst)

# 26. Considering the range of values: b = range(-10, 10), use the function filter to return only negative numbers.

# b = range (-10,10)
# new_lst = list (filter(lambda b:b<0, range(-10,10)))
# print(new_lst)

# 27*. Using the filter function, find the values that are common to the two lists:
# list_1 = [1, 2, 3, 5, 7, 9]
# list_2 = [2, 3, 5, 6, 7, 8]
#
# common_lst = list (filter (lambda x: x in list_1, list_2))
# print(common_lst)